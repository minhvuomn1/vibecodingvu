name: HelloVibe CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
permissions:
  contents: write
jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Install Salesforce CLI
      run: |
        npm install --global @salesforce/cli
        sf --version
    - name: Install Salesforce CLI Plugins
      run: |
        echo "Installing Salesforce CLI Plugins..."
        sf plugins install @salesforce/plugin-source @salesforce/plugin-apex
        sf plugins --core
    - name: Authenticate to Salesforce Dev Org using SFDX URL
      run: |
        echo "Authenticating to Dev Org using SFDX AUTH URL..."
        echo "${{ secrets.SFDX_AUTH_URL }}" > sfdx_auth.txt
        sf org login sfdx-url --sfdx-url-file sfdx_auth.txt --alias hellovibe-dev --set-default
        sf org display --target-org hellovibe-dev
    - name: Get Current Commit Hash
      id: get_commit
      run: |
        COMMIT_HASH=$(git rev-parse HEAD)
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_ENV
        echo "Current commit: $COMMIT_HASH"
    - name: Measure Convert (sf project:source:convert)
      id: convert_measure
      run: |
        node scripts/measureStep.js "sf project:source:convert (mdapi out)" -- sf project:source:convert --output-dir mdapi
    - name: Debug Token
      run: |
        if [ -z "${{ secrets.PAT_TOKEN }}" ]; then
          echo " PAT_TOKEN is empty!"
          exit 1
        else
          echo " PAT_TOKEN loaded successfully (hidden)"
        fi    
    - name: Deploy Source to Dev Org
      id: deploy_source
      run: |
        echo "Deploying source to Dev Org..."
        startTime=$(date +%s)
        if sf project deploy start --source-dir force-app --target-org hellovibe-dev --ignore-conflicts; then
          endTime=$(date +%s)
          duration=$((endTime - startTime))
          echo "Source deployed in $duration seconds"
          echo "source_deploy_time=$duration" >> $GITHUB_ENV
        else
          echo "Deployment failed"
          exit 1
        fi
    
    # - name: Run Apex Tests with Coverage
    #   id: run_tests
    #   run: |
    #     echo "Running Apex tests with coverage requirement..."
    #     startTime=$(date +%s)
    #     ./sfdx/bin/sf apex run test -o jeamsont2017350@agentforce.com --wait 10 --result-format json > test-result.json

    #     coverage=$(grep -o '"coveragePercentage":[0-9]*\.[0-9]*' test-result.json | sed 's/"coveragePercentage"://')
    #     if [ -z "$coverage" ]; then coverage="0"; fi
    #     echo "Coverage: ${coverage}%"
    #     if (( $(echo "$coverage >= 85" | bc -l) )); then
    #       echo " Coverage is sufficient: ${coverage}%"
    #     else
    #       echo " Coverage is insufficient: ${coverage}%, minimum required is 85%"
    #       exit 1
    #     fi

    #     passed=$(grep -o '"passed":[0-9]*' test-result.json | sed 's/"passed"://')
    #     failed=$(grep -o '"failed":[0-9]*' test-result.json | sed 's/"failed"://')
    #     echo "Tests Passed: $passed"
    #     echo "Tests Failed: $failed"

    #     endTime=$(date +%s)
    #     duration=$((endTime - startTime))
    #     echo "Tests completed in $duration seconds"
    #     echo "test_execution_time=$duration" >> $GITHUB_ENV

    - name: Store Current State for Potential Rollback
      if: always()
      run: |
        echo "Storing current state for potential rollback..."
        echo "Current commit hash: ${{ env.commit_hash }}"
    - name: Rollback on Deployment Failure
      if: failure() && steps.deploy_source.outcome == 'failure'
      env:
        TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        echo "Rolling back last commit..."
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}.git
        git reset --hard HEAD~1
        git push --force
    - name: Summarize Metrics and Log Execution Times
      run: |
        echo "=== Pipeline Execution Summary ==="
        echo "Source Deployment: ${{ env.source_deploy_time }} seconds"
        echo "Test Execution: ${{ env.test_execution_time }} seconds"
        echo "Commit Hash: ${{ env.commit_hash }}"
        echo ""
        echo "=== Vibe Metrics (today) ==="
        TODAY=$(date +"%Y-%m-%d")
        LOG="VibeWorkflowLogs/${TODAY}-workflow-log.md"
        if [ -f "$LOG" ]; then
          # Extract JSON lines printed by measureStep
          METRICS=$(grep "__VIBE_METRIC__" "$LOG" | sed 's/__VIBE_METRIC__ //')
          echo "$METRICS" | node -e 'let lines="";process.stdin.on("data",d=>lines+=d);process.stdin.on("end",()=>{const arr=lines.trim().split(/\r?\n/).filter(Boolean).map(JSON.parse);if(arr.length===0){console.log("No metrics.");return;}const convert=arr.filter(x=>x.step.includes("project:source:convert"));const avg=convert.length?Math.round(convert.reduce((a,b)=>a+b.durationMs,0)/convert.length):0;const errors=convert.filter(x=>x.exitCode!==0).length;console.log(`Convert count: ${convert.length}`);console.log(`Average duration: ${avg} ms`);console.log(`Errors: ${errors}`);});'
        else
          echo "No VibeWorkflowLogs found for today."
        fi
    - name: Upload VibeWorkflowLogs artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: VibeWorkflowLogs
        path: VibeWorkflowLogs/

name: HelloVibe CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Install Salesforce CLI
      run: |
        curl https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz | tar xJf -
        ./sfdx/bin/sfdx --version
    - name: Install Salesforce CLI Plugins (npm method)
      run: |
        echo "Installing Salesforce CLI Plugins via npm..."
        npm install -g @salesforce/plugin-source @salesforce/plugin-apex
        ./sfdx/bin/sfdx plugins --core
    - name: Authenticate to Salesforce Dev Org using SFDX URL
      run: |
        echo "Authenticating to Dev Org using SFDX AUTH URL..."
        echo "${{ secrets.SFDX_AUTH_URL }}" > sfdx_auth.txt
        ./sfdx/bin/sfdx auth:sfdxurl:store -f sfdx_auth.txt --set-default --alias hellovibe-dev
        ./sfdx/bin/sfdx org display --target-org hellovibe-dev
    - name: Get Current Commit Hash
      id: get_commit
      run: |
        COMMIT_HASH=$(git rev-parse HEAD)
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_ENV
        echo "Current commit: $COMMIT_HASH"
    - name: Deploy Source to Dev Org
      id: deploy_source
      run: |
        echo "Deploying source to Dev Org..."
        startTime=$(date +%s)
        ./sfdx/bin/sfdx force:source:deploy -p force-app --targetusername jeamsont2017350@agentforce.com 
        endTime=$(date +%s)
        duration=$((endTime - startTime))
        echo "Source deployed in $duration seconds"
        echo "source_deploy_time=$duration" >> $GITHUB_ENV
    
    # - name: Run Apex Tests with Coverage
    #   id: run_tests
    #   run: |
    #     echo "Running Apex tests with coverage requirement..."
    #     startTime=$(date +%s)
    #     ./sfdx/bin/sf apex run test -o jeamsont2017350@agentforce.com --wait 10 --result-format json > test-result.json

    #     coverage=$(grep -o '"coveragePercentage":[0-9]*\.[0-9]*' test-result.json | sed 's/"coveragePercentage"://')
    #     if [ -z "$coverage" ]; then coverage="0"; fi
    #     echo "Coverage: ${coverage}%"
    #     if (( $(echo "$coverage >= 85" | bc -l) )); then
    #       echo " Coverage is sufficient: ${coverage}%"
    #     else
    #       echo " Coverage is insufficient: ${coverage}%, minimum required is 85%"
    #       exit 1
    #     fi

    #     passed=$(grep -o '"passed":[0-9]*' test-result.json | sed 's/"passed"://')
    #     failed=$(grep -o '"failed":[0-9]*' test-result.json | sed 's/"failed"://')
    #     echo "Tests Passed: $passed"
    #     echo "Tests Failed: $failed"

    #     endTime=$(date +%s)
    #     duration=$((endTime - startTime))
    #     echo "Tests completed in $duration seconds"
    #     echo "test_execution_time=$duration" >> $GITHUB_ENV

    - name: Store Current State for Potential Rollback
      if: always()
      run: |
        echo "Storing current state for potential rollback..."
        echo "Current commit hash: ${{ env.commit_hash }}"
    - name: Rollback on Deployment Failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback procedure..."
        echo "In real project, this would revert to the previous commit."
        git revert ${{ env.commit_hash }} --no-edit || true
        git push || true
    - name: Log Execution Times
      run: |
        echo "=== Pipeline Execution Summary ==="
        echo "Source Deployment: ${{ env.source_deploy_time }} seconds"
        echo "Test Execution: ${{ env.test_execution_time }} seconds"
        echo "Commit Hash: ${{ env.commit_hash }}"